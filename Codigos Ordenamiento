package tarea1ordenamiento;

/**
 *
 * @author elisa
 */
public class OrdenamientoAUsar  <T extends Comparable<T>>{
            //SELECTION-SORT:
        public void selectionSort(T[] arr) {
            int min;
            T aux;
            for (int i = 0; i < arr.length; i++) {
                min = i;
                for (int j = i + 1; j < arr.length; j++) {
                    if (arr[j].compareTo(arr[min]) < 0) {
                        min = j;
                    }
                }
                aux = arr[i];
                arr[i] = arr[min];
                arr[min] = aux;
            }
        }
        
        public void insertionSort(T[] arr) {
            int rec, pos;
            T aux;
            for (int i = 0; i < arr.length - 1; i++) {
                rec = i;
                pos = i + 1;
                while (rec >= 0 && arr[rec].compareTo(arr[pos]) > 0) {
                    aux = arr[rec];
                    arr[rec] = arr[pos];
                    arr[pos] = aux;
                    rec--;
                    pos--;
                }
            }
        }
        //CLASSICAL-BUBBLE-SORT:
        public void bubbleSort(T[] arr) {
            T aux;
            for (int i = 0; i < arr.length - 1; i++) {
                for (int j = 0; j < arr.length - i - 1; j++) {
                    if (arr[j].compareTo(arr[j + 1]) > 0) {
                        aux = arr[j + 1];
                        arr[j + 1] = arr[j];
                        arr[j] = aux;
                    }
                }
            }

        }
        //QUICK-SORT:
        /* Complejidad: O(n^2)
        ** Nota: Para que un hacker no abuse de mi método hay que agarrar un número aleatorio. */
        public void quickSort(T[] arr) {
            quickSort(arr, 0, arr.length - 1);
        }

        private void quickSort(T[] arr, int low, int high) {
            if (low < high) {
                int posPivot = partition(low, high, arr);
                quickSort(arr, low, posPivot);
                quickSort(arr, posPivot + 1, high);
            }
        }
                public int partition(int low, int high, T[] arr) {
            T pivot = arr[low];
            int i = low, j = high;
            while (i < j) {
                do {
                    i++;
                } while (arr[i].compareTo(pivot) <= 0);

                do {
                    j--;
                } while (arr[j].compareTo(pivot) > 0);

                if (i < j) {
                    swap(arr, i, j);
                }
            }
            swap(arr, low, j);
            return j;
        }
        private void swap(T[] arr, int a, int b) {
            T aux = arr[a];
            arr[a] = arr[b];
            arr[b] = aux;
        }
       //RECURSIVE MERGE_SORT:
        public void mergeSort(T[] array) {
            if (array == null || array.length <= 1) 
                return;
            int mid = array.length / 2;
            // Split left part 
            T[] left = (T[]) new Comparable[mid];
            for (int i = 0; i < mid; i++) 
                left[i] = array[i];
            // Split right part 
            T[] right = (T[]) new Comparable[array.length - mid];
            for (int i = mid; i < array.length; i++) 
                right[i - mid] = array[i];
            mergeSort(left);
            mergeSort(right);
            int i = 0, j = 0, k = 0;
            // Merge left and right arrays 
            while (i < left.length && j < right.length) {
                if (left[i].compareTo(right[j]) < 0) {
                    array[k++] = left[i++];
                } else {
                    array[k++] = right[j++];
                }
            }
            // Collect remaining elements 
            while (i < left.length) {
                array[k++] = left[i++];
            }

            while (j < right.length) {
                array[k++] = right[j++];
            }

        }

        //ITERATIVE MERGE_SORT:
        /*Merge subarrays in bottom up manner. First merge subarrays of size 1 to create sorted  
          subarrays of size 2, then merge subarrays of size 2 to create sorted subarrays of size 4, 
          and so on. */
        public void iterativeMergeSort(T arr[]) {
            int n = arr.length;
            // For current size of subarrays to be merged curr_size varies from  1 to n/2 
            for (int curr_size = 1; curr_size <= n - 1; curr_size = 2 * curr_size) {

                // Pick starting point of different subarrays of current size 
                // For picking starting index of left subarray to be merged 
                for (int left_start = 0; left_start < n - 1; left_start += 2 * curr_size) {
                    // Find ending point of left subarray. mid+1 is starting point of right: 
                    int mid = Math.min(left_start + curr_size - 1, n - 1);

                    int right_end = Math.min(left_start + 2 * curr_size - 1, n - 1);

                    // Merge Subarrays arr[left_start...mid] & arr[mid+1...right_end]:
                    merge(arr, left_start, mid, right_end);
                    //mergeDiegoIndices(arr, left_start, right_end);

                }
            }
        }

        //MERGE-FUNCTION:
        /* Function to merge the two haves arr[l..m] and arr[m+1..r] of array arr[] */
        public void merge(T arr[], int l, int m, int r) {
            int i, j, k;
            int n1 = m - l + 1;
            int n2 = r - m;

            /* create temp arrays */
            T L[] = (T[]) new Comparable[n1];
            T R[] = (T[]) new Comparable[n2];

            /* Copy data to temp arrays L[] and R[] */
            for (i = 0; i < n1; i++) {
                L[i] = arr[l + i];
            }
            for (j = 0; j < n2; j++) {
                R[j] = arr[m + 1 + j];
            }

            /* Merge the temp arrays back into arr[l..r]*/
            i = 0;
            j = 0;
            k = l;
            while (i < n1 && j < n2) {
                if (L[i].compareTo(R[j]) <= 0) {
                    arr[k++] = L[i++];
                } else {
                    arr[k++] = R[j++];
                }
            }
            /* Copy the remaining elements of L[], if there are any */
            while (i < n1) {
                arr[k++] = L[i++];
            }
            /* Copy the remaining elements of R[], if there are any */
            while (j < n2) {
                arr[k++] = R[j++];
            }
        }
}
